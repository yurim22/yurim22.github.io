{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/networks",
    "result": {"pageContext":{"currentCategory":"networks","categories":["All","networks","javascript"],"edges":[{"node":{"id":"8476bb3f-9147-5995-afc4-dae5baca325f","excerpt":"웹 브라우저에서의 양방향 통신 ⚠️ 기존 http 프로토콜의 한계 기존 웹페이지에서 사용하는 http 프로토콜은 요청/응답 패러다임이기에 클라이언트에서 요청을 보내야만 그에 대한 응답을 받았다. http 프로토콜로 통신하는 경우, 특성상 stateless이기 때문에 연결이 유지되지 않아 서버에서 먼저 요청을 보내는 것이 불가능하다. 🧤 http 의 대체 ⇒  ,  ,  Polling : 클라이언트에서 일정 주기마다 요청을 보내고 서버는 현재 상태를 바로 응답하는 방식 🕶 이 방식은 불필요한 트래픽이 발생하기 때문에 실시간 데이터가 중요한 서비스에는 좋지 않다. Long Polling (event 중심) : 클라이언트에서 요청을 보내고 서버에서는 이벤트가 발생했을 때 응답을 내려준다. 그리고 클라이언트가 응답을 받았을 때 다시 다음 응답을 기다리는 요청을 보낸다. 🕶 이 방식은 실시간 반응이 가능하고 polling에 비해서 불필요한 트래픽은 유발하지 않지만 오히려 이벤트가 잦다면 순간…","fields":{"slug":"/websocket/"},"frontmatter":{"categories":"networks","title":"웹 브라우저에서의 양방향 통신","date":"March 22, 2022"}},"next":{"fields":{"slug":"/javascript-document-readyState/"}},"previous":null}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}